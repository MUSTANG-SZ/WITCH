fit: True # If True fit the cluster, overridden by command line
sub: True # If True the cluster before mapmaking, overridden by command line
n_rounds: 0
wnoise: True

constants:
  Te: 5.0
  freq: "90e9"
  z: 0.451

coords:
  r_map: "20.0*60" # Radial size of grid in arcseconds
  dr: "40.0" # Pixel size of grid in x and y in arcseconds
  dz: 40.0 # Pixel size along the LOS, if not provided dr is used
  x0: "(206.8776*u.degree).to(u.radian).value" # RA of grid origin in radians
  y0: "(-11.7528*u.degree).to(u.radian).value" # Dec of grid origin in radian 

paths:
  # Location of TOD files
  # If an absolute path then that is used directly
  # If a relative path taken relative to MJ_TODROOT
  maps: "RXJ1347"
  # Directory to use as root for outputs
  # If an absolute path then that is used directly
  # If a relative path taken relative to MJ_OUTROOT
  outroot: ""
  subdir: "" # Subdirectory to use
  # Final outdir will be something like: outroot/name/model_name/subdir

# Settings that define the datasets we are working with 
# For now you can only have one, but this structure is in prep for the future
datasets:
  act:
    # These fields need to be set regardless of the dataset
    # This can rely on the imports section
    noise: # Noise to use while fitting
      class: "jm.NoiseWhite"
      args: "['self.ivar']"
      kwargs: "{}"
    funcs: # Functions needed to interact with your dataset
      # All of these need to exist and be importable
      # If you don't have them in a library add the relevant file to your $PYTHONPATH
      # Check docs for the needed signatures
      get_files: "amf.get_files"
      load: "amf.load_maps"
      get_info: "amf.get_info"
      make_beam: "amf.make_beam"
      preproc: "amf.preproc"
      postproc: "amf.postproc"
      postfit: "amf.postfit"
    # Defines the beam 
    # All are passed through eval
    # Note that these define a double gaussian
    beam:
      fwhm1: 122 # FWHM in arcseconds of the first gaussian
      amp1: .9808 # Amplitude of the first gaussian
      fwhm2: 90 # FWHM in arcseconds of the second gaussian
      amp2: 0.0192 # Amplitude of the second gaussian
    prefactor: "float(wu.get_da(cfg['constants']['z'])*wu.y2K_RJ(97e9, cfg['constants']['Te'])*wu.XMpc/wu.me)"
         
# Cluster name
# Used both for the output path as well as to load presets
name: "SIM_MCMC"
sim: True # If True use TODs to make noise and add a simulated cluster

mcmc:
  run: True
  num_steps: 1000
  num_leaps: 5
  step_size: 6e-9
  sample_which: -1
  burn_in: 0.2

model:
  # Unit conversion to apply at the end
  # Will be evaled
  unit_conversion: "float(wu.get_da(constants['z'])*wu.y2uK_CMB(constants['freq'], constants['Te'])*wu.XMpc/wu.me)"
  # Structure to include in the model
  structures:
    a10:
      # The first structure is witch.structures.a10
      structure: "a10"
      parameters:
        dx_1:
          value: -50.0 # Units: arcsec, defined as an offset from x0 as set in base_unit.yaml
          to_fit: False #[True, True, False, True] # Fit on all but the third rounds 
        dy_1:
          value: -50.0 # Units: arcsec, defined as an offset from y0 as set in base_unit.yaml
          to_fit: False #[True, True, False, True]
        dz_1: # Line of sight offset. This is typically unconstrained so generally should be fixed to 0
          value: 0.0
        theta: # Rotation of the model with respect to the positive y axis
          value: 0.0
        P0: # Central pressure in units of keV / cm^3
          value: 8.403
        c500: # Central concentration
          value: 1.177
        m500: # Cluster mass in M_solar
          value: "8e14"
          to_fit: True #[True, False, True, True]
        gamma: # Inner profile slope
          value: .3081
        alpha: # Mid profile slope
          value: 1.551
          to_fit: False 
        beta: # Outer profile slope
          value: 5.4905
          to_fit: True
        z:
          value: 0.97
    ps_gauss:
      structure: "gaussian"
      parameters:
        dx_g:
          value: 150.0
          to_fit: True #[True, True, False, True]
          priors: [-900.0, 900.0]
        dy_g:
          value: 150.0
          to_fit: True #[True, True, False, True]
          priors: [-900.0, 900.0]
        sigma:
          value: 60
          to_fit: True #[False, True, False, True]
          priors: [1, 100]
        amp_g:
          value: 0.02
          to_fit: True #[True, False, True, False]
          priors: [0, .5]

# Setting for the fitter
fitting:
  maxiter: 10 # Maximum fit iterations per round
  chitol: 1e-5 # Change in chisq that we consider to be converged

imports:
  astropy.units: u
  astropy.coordinates: [Angle]
  jitkasi.noise: jn
  jitkasi.solutions.maps: jm
  witch.external.act_map.funcs: amf
